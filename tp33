#include <stdio.h>
#include <stdlib.h>

// Definition of the list element structure
typedef struct element {
    int val;
    struct element *next;
} element;

// Function prototypes
element* loadList(int* arr, int n);
void displayList(element* head);
element* addAtBeginning(element* head, int val);
element* removeLast(element* head);

int main() {
    int arr[5] = {1, 3, 5, 7, 9};
    element* list = loadList(arr, 5);
    
    printf("Original list:\n");
    displayList(list);

    list = addAtBeginning(list, 0);
    printf("After adding 0 at the beginning:\n");
    displayList(list);

    list = removeLast(list);
    printf("After removing the last element:\n");
    displayList(list);

    return 0;
}

// Function to load a list from an array
element* loadList(int* arr, int n) {
    element* head = NULL;
    element* temp = NULL;

    for (int i = 0; i < n; i++) {
        element* newNode = (element*)malloc(sizeof(element));
        newNode->val = arr[i];
        newNode->next = NULL;

        if (head == NULL) {
            head = newNode;
        } else {
            temp->next = newNode;
        }
        temp = newNode;
    }

    return head;
}

// Function to display the elements of the list
void displayList(element* head) {
    element* temp = head;
    while (temp != NULL) {
        printf("%d -> ", temp->val);
        temp = temp->next;
    }
    printf("NULL\n");
}

// Function to add an element at the beginning of the list
element* addAtBeginning(element* head, int val) {
    element* newNode = (element*)malloc(sizeof(element));
    newNode->val = val;
    newNode->next = head;
    return newNode;
}

// Function to remove the last element of the list
element* removeLast(element* head) {
    if (head == NULL || head->next == NULL) {
        free(head); // Free the last node if there's one
        return NULL; // Return NULL if the list becomes empty
    }
    
    element* temp = head;
    while (temp->next && temp->next->next != NULL) {
        temp = temp->next;
    }
    
    free(temp->next); // Free the last node
    temp->next = NULL; // Set the second-to-last node's next to NULL
    return head;
}
